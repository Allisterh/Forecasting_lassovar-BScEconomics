}
View(Bitcoin)
View(Bitcoin)
write.csv(Bitcoin, "~\GitHub\BScEconomics\file_path.csv", row.names=T)
write.csv(Bitcoin, "~/GitHub/BScEconomics/file_path.csv", row.names=T)
# Set up data file parameters
file_path <- "~/GitHub/BScEconomics/file_path.csv"
chunk_size <- 1000000
# Open file connection
con <- file("file_path")
con
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
getwd()
getwd()
setwd("C:/Users/zerzy/Documents/GitHub/BScEconomics/")
getwd()
setwd("C:/Users/zerzy/Documents/GitHub/BScEconomics/")
# Set up data file parameters
file_path <- "C:/Users/zerzy/Documents/GitHub/BScEconomics/file_path.csv"
chunk_size <- 1000000
# Open file connection
con <- file("file_path")
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
# Load necessary packages
library(data.table)
library(biglm)
library(biglm)
# Set up data file parameters
file_path <- "C:/Users/zerzy/Documents/GitHub/BScEconomics/file_path.csv"
chunk_size <- 1000000
# Open file connection
con <- file("file_path")
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
con
# Open file connection
con <- file("file_path")
rm(con)
# Open file connection
con <- file("file_path")
con
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
rm(con)
# Open file connection
con <- file("file_path.csv")
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
# Close file connection
close(con)
# Print model summary
summary(model)
View(dt_chunk)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
# Dropping ASSET-ID from original dataset
Bitcoin <- Bitcoin[,-2]
getwd()
setwd("C:/Users/zerzy/Documents/GitHub/BScEconomics/")
# Set up data file parameters
file_path <- "C:/Users/zerzy/Documents/GitHub/BScEconomics/file_path.csv"
View(Bitcoin)
Bitcoin <- Bitcoin[,-1]
View(Bitcoin)
Bitcoin <- Bitcoin[,1]
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
# Dropping ASSET-ID from original dataset
Bitcoin <- Bitcoin[,-2]
Bitcoin <- Bitcoin[,-1]
Bitcoin$Count2 <- Bitcoin[,-1]
View(Bitcoin)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
Bitcoin <- Bitcoin[,-1]
Bitcoin$Count2 <- Bitcoin[,1]
View(Bitcoin)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
View(Bitcoin)
Bitcoin <- Bitcoin[,-1]
Bitcoin <- Bitcoin[,-1]
Bitcoin$Count2 <- Bitcoin[,1]
Bitcoin$Count <- Bitcoin[,8]
View(Bitcoin)
Bitcoin <- Bitcoin[,-8]
rename(Bitcoin
)
library(dplyr)
rename(Bitcoin
)
?dplr
?rename
graphics.off()  # clear all graphs
rm(list = ls()) # remove all files from your workspace
# Load required library
library(stats)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
?KalmanRun
# Load required library
library(stats)
library(KFAS)
# Define the state space model
ssm <- approxSSM(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
library(KFAS)
install.packages("KFAS")
#install.packages("KFAS")
library(KFAS)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
?SSModel
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
# Load required library
library(stats)
#install.packages("KFAS")
library(KFAS)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(0.001, ncol = 2))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)))#, Q = matrix(0.001, ncol = 2))
# Load required library
library(stats)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(c(0.001, 0, 0, 0.001), ncol = 2))
# Initial state and covariance matrix
init_state <- c(x = x[1], x_dot = 0)
init_cov <- matrix(c(1, 0, 0, 1), ncol = 2)
# Run the Kalman filter
kf <- KalmanRun(ssm, init_state, init_cov)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(c(0.001, 0, 0, 0.001), ncol = 2))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(c(0.001, 1, 1, 0.001), ncol = 2))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = 0)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = 123)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = 123, Q = 123)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = 123)
# Initial state and covariance matrix
init_state <- c(x = x[1], x_dot = 0)
init_cov <- matrix(c(1, 0, 0, 1), ncol = 2)
# Run the Kalman filter
kf <- KalmanRun(ssm, init_state, init_cov)
View(ssm)
# Extract the filtered values
filtered_vals <- kf$states[-1, 1]
# Run the Kalman filter
kf <- KalmanRun(ssm, init_state, init_cov)
?ur.df
library(urca)
?ur.df
library(readxl)
TotalCryptoMarketData <- read_excel("C:/Users/zerzy/Desktop/TotalCryptoMarketData.xlsx")
View(TotalCryptoMarketData)
data <- as.xts(TotalCryptoMarketData)
library(xts)
data <- as.xts(TotalCryptoMarketData)
data <- as.ts(TotalCryptoMarketData)
View(data)
library(xts)
library(highfrequency)
library(data.table)
library(xts)
library(tidyquant)
library(tibble)
library(quantmod)
data <- as.data.table(TotalCryptoMarketData)
data <- as.xts.data.table(data)
plot(data)
autoplot(data)
plot.ts(data)
plot(data)
?plot
plot(data, col = "blue", lty = "dashed",
main = "Monthly Total Cryptocurrency Market Cap"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap"
)
plot(data, col = "blue", #lty = "dashed",
main = "Monthly Cryptocurrency Market Cap"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD",
xlab = " test"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD",
xlab = " test",
ylab = "lab"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD",
xlab = " test",
ylab = "Billions of US Dollars"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD",
ylab = "Billions of US Dollars"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD",
ylab = "Billions of US Dollars"
sub = " in Billions of USD"
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD",
ylab = "Billions of US Dollars",
sub = " in Billions of USD"
)
plot(data, col = "blue", lty = "dashed",
main = "Monthly Cryptocurrency Market Cap in Billions of USD"
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
load("C:/Users/zerzy/Downloads/USTC_ALL_graph_coinmarketcap.csv")
load("C:/Users/zerzy/Downloads/USTC_ALL_graph_coinmarketcap.csv")
library(readr)
USTC_ALL_graph_coinmarketcap <- read_delim("C:/Users/zerzy/Downloads/USTC_ALL_graph_coinmarketcap.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(USTC_ALL_graph_coinmarketcap)
data2 <- as.data.table(USTC_ALL_graph_coinmarketcap)
View(data2)
data2 <- data2[,-1:5]
data2 <- data2[,-1]
data2 <- data2[,-1]
data2 <- data2[,-1]
data2 <- data2[,-1]
data2 <- data2[,-1]
View(data2)
data2 <- data2[,c(2,1)]
View(data2)
data2 <- as.xts.data.table(data2)
plot(data2, col = "blue", lty = "dashed",
main = "TerraUSD Market Cap in Billions of USD"
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
?plot
View(data2)
data2 <- data2$marketCap/10000000
plot(data2, col = "blue", lty = "dashed",
main = "TerraUSD Market Cap in Billions of USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
View(data2)
data2 <- as.data.table(USTC_ALL_graph_coinmarketcap)
data2 <- data2[,-1]
data2 <- data2[,-1]
data2 <- data2[,-1]
data2 <- data2[,-1]
data2 <- data2[,-1]
data2 <- data2[,c(2,1)]
data2 <- as.xts.data.table(data2)
data2 <- data2$marketCap/1000000000
plot(data2, col = "blue", lty = "dashed",
main = "TerraUSD Market Cap in Millions of USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
plot(data2, col = "blue", lty = "dashed",
main = "TerraUSD Market Cap in Billions of USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
data2 <- as.data.table(USTC_ALL_graph_coinmarketcap)
View(data2)
data2 <- data2[,-2]
data2 <- data2[,-2]
data2 <- data2[,-2]
data2 <- data2[,-2]
data2 <- data2[,-2]
data2 <- data2[,c(2,1)]
data2 <- as.xts.data.table(data2)
plot(data2, col = "blue", lty = "dashed",
main = "TerraUSD Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
library(readr)
BTC_USD_1_ <- read_csv("C:/Users/zerzy/Downloads/BTC-USD (1).csv")
View(BTC_USD_1_)
data3 <- as.data.table(BTC_USD_1_)
View(BTC_USD_1_)
data3 <- data2[,-1]
data3 <- data3[,-1]
data3 <- as.data.table(BTC_USD_1_)
data3 <- data3[,-1]
View(data3)
data3 <- as.data.table(BTC_USD_1_)
data3 <- data3[,-2]
data3 <- data3[,-3]
data3 <- data3[,-3]
data3 <- data3[,-3]
data3 <- data3[,-3]
data2 <- as.xts.data.table(data2)
data3 <- as.xts.data.table(data3)
plot(data3, col = "blue", lty = "dashed",
main = "Bitcoin Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
#Load the tikzDevice package, if you dont have it, install with:
install.packages("tikzDevice", repos="http://R-Forge.R-project.org")
#Load the tikzDevice package, if you dont have it, install with:
library(tikzDevice)
require(tikzDevice)
# The following wwill create normal.tex in the working
# directory the first time this is run it may take a long time because the
# process of calulating string widths for proper placement is
# computationally intensive, the results will get cached for the current R
# session or will get permenantly cached if you set
# options( tikzMetricsDictionary='/path/to/dictionary' ) which will be
# created if it does not exist.  Also if the flag standAlone is not set to
# TRUE then a file is created which can be included with \include{}
tikz('normal.tex', standAlone = TRUE, width=5, height=5)
# Normal distribution curve
x <- seq(-4.5,4.5,length.out=100)
y <- dnorm(x)
# Integration points
xi <- seq(-2,2,length.out=30)
yi <- dnorm(xi)
# plot the curve
plot(x,y,type='l',col='blue',ylab='$p(x)$',xlab='$x$')
# plot the panels
lines(xi,yi,type='s')
lines(range(xi),c(0,0))
lines(xi,yi,type='h')
#Add some equations as labels
title(main="$p(x)=\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}}$")
int <- integrate(dnorm,min(xi),max(xi),subdivisions=length(xi))
text(2.8, 0.3, paste("\\small$\\displaystyle\\int_{", min(xi),
"}^{", max(xi), "}p(x)dx\\approx", round(int[['value']],3),
'$', sep=''))
#Close the device
dev.off()
# Compile the tex file
tools::texi2dvi('normal.tex',pdf=T)
tikz('Plot.tex', standAlone = TRUE, width=5, height=5)
plot(data3, col = "blue", lty = "dashed",
main = "Bitcoin Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
dev.off()
tikz('Plot.tex', standAlone = TRUE)
plot(data3, col = "blue", lty = "dashed",
main = "Bitcoin Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
plot(data3, col = "blue", lty = "dashed",
main = "Bitcoin Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
dev.off()
tikz('plot.tex', standAlone = TRUE, width=10, height=10)
plot(data3, col = "blue", lty = "dashed",
main = "Bitcoin Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
dev.off()
tikz('plot.tex', standAlone = TRUE, width=5, height=5)
plot(data3, col = "blue", lty = "dashed",
main = "Bitcoin Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
dev.off()
tikz('plot.tex', standAlone = TRUE, width=5.5, height=5.5)
plot(data3, col = "blue", lty = "dashed",
main = "Bitcoin Open Price in USD",
ylim =
#ylab = "Billions of US Dollars",
#sub = " in Billions of USD"
)
dev.off()
gc()
