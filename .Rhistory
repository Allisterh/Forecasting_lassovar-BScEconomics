# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
Price <- t(Bitcoin$Close)
write.table(Price, file = "data.txt", sep = " ")
Price <- Bitcoin$Close
write.table(Price, file = "data.txt", sep = " ", row.names = F, col.names = F)
?parallel
install.packages("parallel")
??parallel
library(parallel)
detectCores()
s <- system.time({
+         mn <- mclapply(specdata, function(df) {
+                 quantile(df$sulfate, 0.9, na.rm = TRUE)
+         }, mc.cores = 4)
install.packages("parallel","ff")
install.packages("parallel", "ff")
install.packages("ff")
library(ff)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
??ff
x <- ff(0, length=12)
View(x)
x <- ff(Bitcoin, length=10)
x <- ff(Bitcoin[ ,1:10], length=10)
x <- ff(Bitcoin[1:10,], length=10)
x <- ff(Bitcoin[ ,1:10], length=10)
x <- ff(as.numeric(Bitcoin[ ,1:10]), length=10)
View(x)
x <- ff(Bitcoin$Count, length=10)
View(x)
x <- ff(Bitcoin$Count)
View(x)
x <- ff(Bitcoin)
View(x)
x <- ff(t(Bitcoin))
View(x)
View(Bitcoin)
x[[1]]
detect(Bitcoin)
?Bitcoin
View(Bitcoin)
x <- as.ffdf(Bitcoin)
View(x)
x[["timestamp"]]
View(Bitcoin)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
# Dropping ASSET-ID from original dataset
Bitcoin <- Bitcoin[,-2]
install.packages("pensim")
library(ff,pensim)
data(beer.exprs)
library(pensim)
data(beer.exprs)
mysd <- apply(beer.exprs, 1, sd)
View(beer.exprs)
mysd
beer.subset <- as.matrix(beer.exprs[rank(-mysd) <= 100, ])
heatmap(beer.subset)
View(beer.subset)
mysd2 <- apply(Bitcoin, 1, sd)
beer.subset2 <- as.matrix(Bitcoin[rank(-mysd2) <= 100, ])
heatmap(beer.subset2)
gc()
# Load necessary packages
library(vars)
library(grpreg)
install.packages("grpreg")
library(grpreg)
?ts
# Convert data into time series object
data_ts <- ts(data[,2:ncol(Bitcoin)])
# Convert data into time series object
data_ts <- ts(Bitcoin[,2:ncol(Bitcoin)], start = c(2021, 1), frequency = 15)
View(data_ts)
# Perform VAR-lasso model with grpreg
varlasso <- grpreg(VAR(data_ts, p = 2), penalty = "lasso", lambda = 0.1)
?grpreg
# Perform VAR-lasso model with grpreg
varlasso <- grpreg(VAR(data_ts, p = 2), penalty = "lasso", lambda = 0.1)
# Perform VAR-lasso model with grpreg
varlasso <- grpreg(VAR(data_ts, p = 2), penalty = "grLasso", lambda = 0.1)
View(data_ts)
data_ts[,8]
# Perform VAR-lasso model with grpreg
varlasso <- grpreg(VAR(data_ts, p = 60), y = data_ts[,8], penalty = "grLasso", lambda = 0.1)
# Perform VAR-lasso model with grpreg
varlasso <- grpreg(VAR(data_ts, p = 60), y = data_ts[,8], penalty = "grLasso")
gc()
gc()
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
# Dropping ASSET-ID from original dataset
Bitcoin <- Bitcoin[,-2]
# Load necessary packages
library(vars)
library(grpreg)
# Convert data into time series object
data_ts <- ts(Bitcoin[,2:ncol(Bitcoin)], start = c(2021, 1), frequency = 15)
# Perform VAR-lasso model with grpreg
varlasso <- grpreg(VAR(data_ts, p = 2), y = data_ts[,8], penalty = "grLasso")
# Perform VAR-lasso model with grpreg
varlasso <- grpreg(as.matrix(VAR(data_ts, p = 2)), y = data_ts[,8], penalty = "grLasso")
VAR(data_ts, p = 2)
test.mod <- VAR(data_ts, p = 2)
test.mod$summary
View(test.mod)
?VAR
?grpreg
varlasso <- grpreg(test.mod$varresult$Count$coefficients, y = data_ts[,8], penalty = "grLasso")
varlasso <- grpreg(as.matrix(test.mod$varresult$Count$coefficients[1,]), y = data_ts[,8], penalty = "grLasso")
varlasso <- grpreg(as.matrix(test.mod$varresult$Count$coefficients[,1]), y = data_ts[,8], penalty = "grLasso")
varlasso <- grpreg(as.matrix(test.mod$varresult$Count$coefficients[,1]), penalty = "grLasso")
graphics.off()  # clear all graphs
rm(list = ls()) # remove all files from your workspace
gc()
gc()
gc()
gc()
graphics.off()  # clear all graphs
rm(list = ls()) # remove all files from your workspace
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Set up data file parameters
file_path <- load("~/GitHub/BScEconomics/data.RData")
# Load necessary packages
library(data.table)
library(biglm)
# Set up data file parameters
file_path <- load("~/GitHub/BScEconomics/data.RData")
chunk_size <- 1000000
# Open file connection
con <- file(file_path, "r")
?file
# Set up data file parameters
file_path <- load("~/GitHub/BScEconomics/data2.RData")
chunk_size <- 1000000
# Open file connection
con <- file(file_path)
# Initialize model
model <- NULL
# Open file connection
con <- file("file_path")
con
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
View(Bitcoin)
View(Bitcoin)
write.csv(Bitcoin, "~\GitHub\BScEconomics\file_path.csv", row.names=T)
write.csv(Bitcoin, "~/GitHub/BScEconomics/file_path.csv", row.names=T)
# Set up data file parameters
file_path <- "~/GitHub/BScEconomics/file_path.csv"
chunk_size <- 1000000
# Open file connection
con <- file("file_path")
con
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
getwd()
getwd()
setwd("C:/Users/zerzy/Documents/GitHub/BScEconomics/")
getwd()
setwd("C:/Users/zerzy/Documents/GitHub/BScEconomics/")
# Set up data file parameters
file_path <- "C:/Users/zerzy/Documents/GitHub/BScEconomics/file_path.csv"
chunk_size <- 1000000
# Open file connection
con <- file("file_path")
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
# Load necessary packages
library(data.table)
library(biglm)
library(biglm)
# Set up data file parameters
file_path <- "C:/Users/zerzy/Documents/GitHub/BScEconomics/file_path.csv"
chunk_size <- 1000000
# Open file connection
con <- file("file_path")
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
con
# Open file connection
con <- file("file_path")
rm(con)
# Open file connection
con <- file("file_path")
con
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
rm(con)
# Open file connection
con <- file("file_path.csv")
# Initialize model
model <- NULL
# Read and process data in chunks
while (length(chunk <- readLines(con, n = chunk_size)) > 0) {
dt_chunk <- data.table::fread(text = chunk, header = TRUE, sep = ",")
# Code to process chunk of data
model_chunk <- biglm::biglm(y ~ x1 + x2, data = dt_chunk)
# Combine model results
if (is.null(model)) {
model <- model_chunk
} else {
model <- biglm::update(model, model_chunk$terms, model_chunk)
}
}
# Close file connection
close(con)
# Print model summary
summary(model)
View(dt_chunk)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
# Dropping ASSET-ID from original dataset
Bitcoin <- Bitcoin[,-2]
getwd()
setwd("C:/Users/zerzy/Documents/GitHub/BScEconomics/")
# Set up data file parameters
file_path <- "C:/Users/zerzy/Documents/GitHub/BScEconomics/file_path.csv"
View(Bitcoin)
Bitcoin <- Bitcoin[,-1]
View(Bitcoin)
Bitcoin <- Bitcoin[,1]
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
# Dropping ASSET-ID from original dataset
Bitcoin <- Bitcoin[,-2]
Bitcoin <- Bitcoin[,-1]
Bitcoin$Count2 <- Bitcoin[,-1]
View(Bitcoin)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
Bitcoin <- Bitcoin[,-1]
Bitcoin$Count2 <- Bitcoin[,1]
View(Bitcoin)
# Bitcoin only
load("~/GitHub/BScEconomics/data.RData")
# Checking missing values
sum(is.na(as.matrix(Bitcoin)))
#Complete cases omiiting
Bitcoin <- na.omit(Bitcoin)
sum(is.na(as.matrix(Bitcoin)))
View(Bitcoin)
Bitcoin <- Bitcoin[,-1]
Bitcoin <- Bitcoin[,-1]
Bitcoin$Count2 <- Bitcoin[,1]
Bitcoin$Count <- Bitcoin[,8]
View(Bitcoin)
Bitcoin <- Bitcoin[,-8]
rename(Bitcoin
)
library(dplyr)
rename(Bitcoin
)
?dplr
?rename
graphics.off()  # clear all graphs
rm(list = ls()) # remove all files from your workspace
# Load required library
library(stats)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
?KalmanRun
# Load required library
library(stats)
library(KFAS)
# Define the state space model
ssm <- approxSSM(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
library(KFAS)
install.packages("KFAS")
#install.packages("KFAS")
library(KFAS)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
?SSModel
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
# Load required library
library(stats)
#install.packages("KFAS")
library(KFAS)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(0.1, N), Q = 0.001)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(0.001, ncol = 2))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)))#, Q = matrix(0.001, ncol = 2))
# Load required library
library(stats)
# Generate a time series with random noise
set.seed(123)
N <- 100
x <- sin(seq(0, 2*pi, length.out = N))
y <- x + rnorm(N, mean = 0, sd = 0.1)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(c(0.001, 0, 0, 0.001), ncol = 2))
# Initial state and covariance matrix
init_state <- c(x = x[1], x_dot = 0)
init_cov <- matrix(c(1, 0, 0, 1), ncol = 2)
# Run the Kalman filter
kf <- KalmanRun(ssm, init_state, init_cov)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(c(0.001, 0, 0, 0.001), ncol = 2))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = matrix(c(0.001, 1, 1, 0.001), ncol = 2))
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = 0)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = diag(rep(0.1, N)), Q = 123)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = 123, Q = 123)
# Define the state space model
ssm <- SSModel(y ~ -1 + x, H = 123)
# Initial state and covariance matrix
init_state <- c(x = x[1], x_dot = 0)
init_cov <- matrix(c(1, 0, 0, 1), ncol = 2)
# Run the Kalman filter
kf <- KalmanRun(ssm, init_state, init_cov)
View(ssm)
# Extract the filtered values
filtered_vals <- kf$states[-1, 1]
# Run the Kalman filter
kf <- KalmanRun(ssm, init_state, init_cov)
?ur.df
library(urca)
?ur.df
